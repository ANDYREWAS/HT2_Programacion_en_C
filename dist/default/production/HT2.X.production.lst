

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Wed Mar 30 21:10:21 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.40
    19                           ; Generated 17/11/2021 GMT
    20                           ; 
    21                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209                           
   210                           	psect	idataBANK0
   211  0119                     __pidataBANK0:
   212                           
   213                           ;initializer for _valores
   214  0119  3402               	retlw	2
   215  011A  3400               	retlw	0
   216  011B  3408               	retlw	8
   217  011C  3400               	retlw	0
   218  011D  340C               	retlw	12
   219  011E  3400               	retlw	0
   220  011F  3413               	retlw	19
   221  0120  3400               	retlw	0
   222  0121  3404               	retlw	4
   223  0122  3400               	retlw	0
   224  0123  340B               	retlw	11
   225  0124  3400               	retlw	0
   226  0125  3407               	retlw	7
   227  0126  3400               	retlw	0
   228  0127  3403               	retlw	3
   229  0128  3400               	retlw	0
   230  0129  340D               	retlw	13
   231  012A  3400               	retlw	0
   232  012B  3409               	retlw	9
   233  012C  3400               	retlw	0
   234  0007                     _PORTC	set	7
   235  0005                     _PORTA	set	5
   236  0006                     _PORTBbits	set	6
   237  000B                     _INTCONbits	set	11
   238  008F                     _OSCCONbits	set	143
   239  0096                     _IOCBbits	set	150
   240  0095                     _WPUBbits	set	149
   241  0081                     _OPTION_REGbits	set	129
   242  0086                     _TRISBbits	set	134
   243  0085                     _TRISA	set	133
   244  0087                     _TRISC	set	135
   245  0189                     _ANSELH	set	393
   246  0188                     _ANSEL	set	392
   247                           
   248                           	psect	cinit
   249  000F                     start_initialization:	
   250                           ; #config settings
   251                           
   252  000F                     __initialization:
   253                           
   254                           ; Initialize objects allocated to BANK0
   255  000F  1383               	bcf	3,7	;select IRP bank0
   256  0010  3034               	movlw	low (__pdataBANK0+20)
   257  0011  00FD               	movwf	btemp+-1
   258  0012  3001               	movlw	high __pidataBANK0
   259  0013  00FE               	movwf	btemp
   260  0014  3019               	movlw	low __pidataBANK0
   261  0015  00FF               	movwf	btemp+1
   262  0016  3020               	movlw	low __pdataBANK0
   263  0017  0084               	movwf	4
   264  0018  120A  118A  2131  120A  118A  	fcall	init_ram0
   265                           
   266                           ; Clear objects allocated to COMMON
   267  001D  01F4               	clrf	__pbssCOMMON& (0+127)
   268  001E  01F5               	clrf	(__pbssCOMMON+1)& (0+127)
   269  001F                     end_of_initialization:	
   270                           ;End of C runtime variable initialization code
   271                           
   272  001F                     __end_of__initialization:
   273  001F  0183               	clrf	3
   274  0020  120A  118A  2940   	ljmp	_main	;jump to C main() function
   275                           
   276                           	psect	bssCOMMON
   277  0074                     __pbssCOMMON:
   278  0074                     _posi:
   279  0074                     	ds	1
   280  0075                     _contador:
   281  0075                     	ds	1
   282                           
   283                           	psect	dataBANK0
   284  0020                     __pdataBANK0:
   285  0020                     _valores:
   286  0020                     	ds	20
   287                           
   288                           	psect	inittext
   289  012D                     init_fetch0:	
   290                           ;	Called with low address in FSR and high address in W
   291                           
   292  012D  087E               	movf	btemp,w
   293  012E  008A               	movwf	10
   294  012F  087F               	movf	btemp+1,w
   295  0130  0082               	movwf	2
   296  0131                     init_ram0:	
   297                           ;Called with:
   298                           ;	high address of idata address in btemp 
   299                           ;	low address of idata address in btemp+1 
   300                           ;	low address of data in FSR
   301                           ;	high address + 1 of data in btemp-1
   302                           
   303  0131  120A  118A  212D  120A  118A  	fcall	init_fetch0
   304  0136  0080               	movwf	0
   305  0137  0A84               	incf	4,f
   306  0138  0804               	movf	4,w
   307  0139  067D               	xorwf	btemp+-1,w
   308  013A  1903               	btfsc	3,2
   309  013B  3400               	retlw	0
   310  013C  0AFF               	incf	btemp+1,f
   311  013D  1903               	btfsc	3,2
   312  013E  0AFE               	incf	btemp,f
   313  013F  2931               	goto	init_ram0
   314                           
   315                           	psect	cstackCOMMON
   316  0070                     __pcstackCOMMON:
   317  0070                     ?_setup:
   318  0070                     ?_isr:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ??_isr:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_main:	
   325                           ; 1 bytes @ 0x0
   326                           
   327                           
   328                           ; 1 bytes @ 0x0
   329  0070                     	ds	4
   330  0074                     ??_setup:
   331  0074                     ??_main:	
   332                           ; 1 bytes @ 0x4
   333                           
   334                           
   335                           	psect	maintext
   336  0140                     __pmaintext:	
   337                           ; 1 bytes @ 0x4
   338 ;;
   339 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   340 ;;
   341 ;; *************** function _main *****************
   342 ;; Defined at:
   343 ;;		line 95 in file "Ejercicio4.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;		None
   348 ;; Return value:  Size  Location     Type
   349 ;;                  1    wreg      void 
   350 ;; Registers used:
   351 ;;		wreg, status,2, status,0, pclath, cstack
   352 ;; Tracked objects:
   353 ;;		On entry : B00/0
   354 ;;		On exit  : 0/0
   355 ;;		Unchanged: 0/0
   356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   357 ;;      Params:         0       0       0       0       0
   358 ;;      Locals:         0       0       0       0       0
   359 ;;      Temps:          0       0       0       0       0
   360 ;;      Totals:         0       0       0       0       0
   361 ;;Total ram usage:        0 bytes
   362 ;; Hardware stack levels required when called: 2
   363 ;; This function calls:
   364 ;;		_setup
   365 ;; This function is called by:
   366 ;;		Startup code after reset
   367 ;; This function uses a non-reentrant model
   368 ;;
   369                           
   370  0140                     _main:	
   371                           ;psect for function _main
   372                           
   373  0140                     l748:	
   374                           ;incstack = 0
   375                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   376                           
   377                           
   378                           ;Ejercicio4.c: 96:     setup();
   379  0140  120A  118A  20F7  120A  118A  	fcall	_setup
   380  0145                     l750:
   381                           
   382                           ;Ejercicio4.c: 100:         PORTA = contador;
   383  0145  0875               	movf	_contador,w
   384  0146  1283               	bcf	3,5	;RP0=0, select bank0
   385  0147  1303               	bcf	3,6	;RP1=0, select bank0
   386  0148  0085               	movwf	5	;volatile
   387  0149                     l752:
   388                           
   389                           ;Ejercicio4.c: 101:         PORTC = posi;
   390  0149  0874               	movf	_posi,w
   391  014A  0087               	movwf	7	;volatile
   392  014B  2945               	goto	l750
   393  014C  120A  118A  280C   	ljmp	start
   394  014F                     __end_of_main:
   395                           
   396                           	psect	text1
   397  00F7                     __ptext1:	
   398 ;; *************** function _setup *****************
   399 ;; Defined at:
   400 ;;		line 108 in file "Ejercicio4.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;		None
   405 ;; Return value:  Size  Location     Type
   406 ;;                  1    wreg      void 
   407 ;; Registers used:
   408 ;;		wreg, status,2, status,0
   409 ;; Tracked objects:
   410 ;;		On entry : 0/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   414 ;;      Params:         0       0       0       0       0
   415 ;;      Locals:         0       0       0       0       0
   416 ;;      Temps:          0       0       0       0       0
   417 ;;      Totals:         0       0       0       0       0
   418 ;;Total ram usage:        0 bytes
   419 ;; Hardware stack levels used: 1
   420 ;; Hardware stack levels required when called: 1
   421 ;; This function calls:
   422 ;;		Nothing
   423 ;; This function is called by:
   424 ;;		_main
   425 ;; This function uses a non-reentrant model
   426 ;;
   427                           
   428  00F7                     _setup:	
   429                           ;psect for function _setup
   430                           
   431  00F7                     l656:	
   432                           ;incstack = 0
   433                           ; Regs used in _setup: [wreg+status,2+status,0]
   434                           
   435                           
   436                           ;Ejercicio4.c: 109:     ANSEL = 0;
   437  00F7  1683               	bsf	3,5	;RP0=1, select bank3
   438  00F8  1703               	bsf	3,6	;RP1=1, select bank3
   439  00F9  0188               	clrf	8	;volatile
   440                           
   441                           ;Ejercicio4.c: 110:     ANSELH = 0;
   442  00FA  0189               	clrf	9	;volatile
   443                           
   444                           ;Ejercicio4.c: 112:     TRISC = 0x00;
   445  00FB  1683               	bsf	3,5	;RP0=1, select bank1
   446  00FC  1303               	bcf	3,6	;RP1=0, select bank1
   447  00FD  0187               	clrf	7	;volatile
   448                           
   449                           ;Ejercicio4.c: 113:     PORTC = 0;
   450  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   451  00FF  1303               	bcf	3,6	;RP1=0, select bank0
   452  0100  0187               	clrf	7	;volatile
   453                           
   454                           ;Ejercicio4.c: 115:     TRISA = 0x00;
   455  0101  1683               	bsf	3,5	;RP0=1, select bank1
   456  0102  1303               	bcf	3,6	;RP1=0, select bank1
   457  0103  0185               	clrf	5	;volatile
   458                           
   459                           ;Ejercicio4.c: 116:     PORTA = 0;
   460  0104  1283               	bcf	3,5	;RP0=0, select bank0
   461  0105  1303               	bcf	3,6	;RP1=0, select bank0
   462  0106  0185               	clrf	5	;volatile
   463  0107                     l658:
   464                           
   465                           ;Ejercicio4.c: 119:     TRISBbits.TRISB0 = 1;
   466  0107  1683               	bsf	3,5	;RP0=1, select bank1
   467  0108  1303               	bcf	3,6	;RP1=0, select bank1
   468  0109  1406               	bsf	6,0	;volatile
   469  010A                     l660:
   470                           
   471                           ;Ejercicio4.c: 120:     TRISBbits.TRISB1 = 1;
   472  010A  1486               	bsf	6,1	;volatile
   473  010B                     l662:
   474                           
   475                           ;Ejercicio4.c: 121:     OPTION_REGbits.nRBPU = 0;
   476  010B  1381               	bcf	1,7	;volatile
   477  010C                     l664:
   478                           
   479                           ;Ejercicio4.c: 122:     WPUBbits.WPUB0 = 1;
   480  010C  1415               	bsf	21,0	;volatile
   481  010D                     l666:
   482                           
   483                           ;Ejercicio4.c: 123:     WPUBbits.WPUB1 = 1;
   484  010D  1495               	bsf	21,1	;volatile
   485  010E                     l668:
   486                           
   487                           ;Ejercicio4.c: 125:     INTCONbits.GIE = 1;
   488  010E  178B               	bsf	11,7	;volatile
   489  010F                     l670:
   490                           
   491                           ;Ejercicio4.c: 126:     INTCONbits.RBIE = 1;
   492  010F  158B               	bsf	11,3	;volatile
   493  0110                     l672:
   494                           
   495                           ;Ejercicio4.c: 127:     IOCBbits.IOCB0 = 1;
   496  0110  1416               	bsf	22,0	;volatile
   497  0111                     l674:
   498                           
   499                           ;Ejercicio4.c: 128:     IOCBbits.IOCB1 = 1;
   500  0111  1496               	bsf	22,1	;volatile
   501  0112                     l676:
   502                           
   503                           ;Ejercicio4.c: 129:     INTCONbits.RBIF = 0;
   504  0112  100B               	bcf	11,0	;volatile
   505  0113                     l678:
   506                           
   507                           ;Ejercicio4.c: 132:     OSCCONbits.IRCF = 0b0110;
   508  0113  080F               	movf	15,w	;volatile
   509  0114  398F               	andlw	-113
   510  0115  3860               	iorlw	96
   511  0116  008F               	movwf	15	;volatile
   512  0117                     l680:
   513                           
   514                           ;Ejercicio4.c: 133:     OSCCONbits.SCS = 1;
   515  0117  140F               	bsf	15,0	;volatile
   516  0118                     l64:
   517  0118  0008               	return
   518  0119                     __end_of_setup:
   519                           
   520                           	psect	text2
   521  0023                     __ptext2:	
   522 ;; *************** function _isr *****************
   523 ;; Defined at:
   524 ;;		line 41 in file "Ejercicio4.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;		None
   527 ;; Auto vars:     Size  Location     Type
   528 ;;		None
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      void 
   531 ;; Registers used:
   532 ;;		wreg, status,2, status,0
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   538 ;;      Params:         0       0       0       0       0
   539 ;;      Locals:         0       0       0       0       0
   540 ;;      Temps:          4       0       0       0       0
   541 ;;      Totals:         4       0       0       0       0
   542 ;;Total ram usage:        4 bytes
   543 ;; Hardware stack levels used: 1
   544 ;; This function calls:
   545 ;;		Nothing
   546 ;; This function is called by:
   547 ;;		Interrupt level 1
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551  0023                     _isr:	
   552                           ;psect for function _isr
   553                           
   554  0023                     i1l682:
   555                           
   556                           ;Ejercicio4.c: 43:     if(INTCONbits.RBIF){
   557  0023  1C0B               	btfss	11,0	;volatile
   558  0024  2826               	goto	u1_21
   559  0025  2827               	goto	u1_20
   560  0026                     u1_21:
   561  0026  28F0               	goto	i1l53
   562  0027                     u1_20:
   563  0027                     i1l684:
   564                           
   565                           ;Ejercicio4.c: 45:         if (contador > 20)
   566  0027  3015               	movlw	21
   567  0028  0275               	subwf	_contador,w
   568  0029  1C03               	skipc
   569  002A  282C               	goto	u2_21
   570  002B  282D               	goto	u2_20
   571  002C                     u2_21:
   572  002C  282E               	goto	i1l688
   573  002D                     u2_20:
   574  002D                     i1l686:
   575                           
   576                           ;Ejercicio4.c: 46:             contador = 0;
   577  002D  01F5               	clrf	_contador
   578  002E                     i1l688:
   579                           
   580                           ;Ejercicio4.c: 47:             INTCONbits.RBIF = 0;
   581  002E  100B               	bcf	11,0	;volatile
   582  002F                     i1l690:
   583                           
   584                           ;Ejercicio4.c: 48:         if (!PORTBbits.RB0)
   585  002F  1283               	bcf	3,5	;RP0=0, select bank0
   586  0030  1303               	bcf	3,6	;RP1=0, select bank0
   587  0031  1806               	btfsc	6,0	;volatile
   588  0032  2834               	goto	u3_21
   589  0033  2835               	goto	u3_20
   590  0034                     u3_21:
   591  0034  2839               	goto	i1l694
   592  0035                     u3_20:
   593  0035                     i1l692:
   594                           
   595                           ;Ejercicio4.c: 49:             contador += 1;
   596  0035  3001               	movlw	1
   597  0036  00F0               	movwf	??_isr
   598  0037  0870               	movf	??_isr,w
   599  0038  07F5               	addwf	_contador,f
   600  0039                     i1l694:
   601                           
   602                           ;Ejercicio4.c: 50:             INTCONbits.RBIF = 0;
   603  0039  100B               	bcf	11,0	;volatile
   604  003A                     i1l696:
   605                           
   606                           ;Ejercicio4.c: 51:         if (!PORTBbits.RB1)
   607  003A  1886               	btfsc	6,1	;volatile
   608  003B  283D               	goto	u4_21
   609  003C  283E               	goto	u4_20
   610  003D                     u4_21:
   611  003D  2840               	goto	i1l700
   612  003E                     u4_20:
   613  003E                     i1l698:
   614                           
   615                           ;Ejercicio4.c: 52:             contador -= 1;
   616  003E  3001               	movlw	1
   617  003F  02F5               	subwf	_contador,f
   618  0040                     i1l700:
   619                           
   620                           ;Ejercicio4.c: 53:             INTCONbits.RBIF = 0;
   621  0040  100B               	bcf	11,0	;volatile
   622  0041                     i1l702:
   623                           
   624                           ;Ejercicio4.c: 56:         if (contador == valores[0])
   625  0041  0875               	movf	_contador,w
   626  0042  00F0               	movwf	??_isr
   627  0043  01F1               	clrf	??_isr+1
   628  0044  0821               	movf	_valores+1,w
   629  0045  0671               	xorwf	??_isr+1,w
   630  0046  1D03               	skipz
   631  0047  284A               	goto	u5_25
   632  0048  0820               	movf	_valores,w
   633  0049  0670               	xorwf	??_isr,w
   634  004A                     u5_25:
   635  004A  1D03               	skipz
   636  004B  284D               	goto	u5_21
   637  004C  284E               	goto	u5_20
   638  004D                     u5_21:
   639  004D  284F               	goto	i1l706
   640  004E                     u5_20:
   641  004E                     i1l704:
   642                           
   643                           ;Ejercicio4.c: 57:             posi = 0;
   644  004E  01F4               	clrf	_posi
   645  004F                     i1l706:
   646                           
   647                           ;Ejercicio4.c: 58:             INTCONbits.RBIF = 0;
   648  004F  100B               	bcf	11,0	;volatile
   649  0050                     i1l708:
   650                           
   651                           ;Ejercicio4.c: 59:         if (contador == valores[1])
   652  0050  0875               	movf	_contador,w
   653  0051  00F0               	movwf	??_isr
   654  0052  01F1               	clrf	??_isr+1
   655  0053  0823               	movf	_valores+3,w
   656  0054  0671               	xorwf	??_isr+1,w
   657  0055  1D03               	skipz
   658  0056  2859               	goto	u6_25
   659  0057  0822               	movf	_valores+2,w
   660  0058  0670               	xorwf	??_isr,w
   661  0059                     u6_25:
   662  0059  1D03               	skipz
   663  005A  285C               	goto	u6_21
   664  005B  285D               	goto	u6_20
   665  005C                     u6_21:
   666  005C  285F               	goto	i1l44
   667  005D                     u6_20:
   668  005D                     i1l710:
   669                           
   670                           ;Ejercicio4.c: 60:             posi = 1;
   671  005D  01F4               	clrf	_posi
   672  005E  0AF4               	incf	_posi,f
   673  005F                     i1l44:
   674                           
   675                           ;Ejercicio4.c: 61:             INTCONbits.RBIF = 0;
   676  005F  100B               	bcf	11,0	;volatile
   677  0060                     i1l712:
   678                           
   679                           ;Ejercicio4.c: 62:         if (contador == valores[2])
   680  0060  0875               	movf	_contador,w
   681  0061  00F0               	movwf	??_isr
   682  0062  01F1               	clrf	??_isr+1
   683  0063  0825               	movf	_valores+5,w
   684  0064  0671               	xorwf	??_isr+1,w
   685  0065  1D03               	skipz
   686  0066  2869               	goto	u7_25
   687  0067  0824               	movf	_valores+4,w
   688  0068  0670               	xorwf	??_isr,w
   689  0069                     u7_25:
   690  0069  1D03               	skipz
   691  006A  286C               	goto	u7_21
   692  006B  286D               	goto	u7_20
   693  006C                     u7_21:
   694  006C  2871               	goto	i1l716
   695  006D                     u7_20:
   696  006D                     i1l714:
   697                           
   698                           ;Ejercicio4.c: 63:             posi = 2;
   699  006D  3002               	movlw	2
   700  006E  00F0               	movwf	??_isr
   701  006F  0870               	movf	??_isr,w
   702  0070  00F4               	movwf	_posi
   703  0071                     i1l716:
   704                           
   705                           ;Ejercicio4.c: 64:             INTCONbits.RBIF = 0;
   706  0071  100B               	bcf	11,0	;volatile
   707                           
   708                           ;Ejercicio4.c: 65:         if (contador == valores[3])
   709  0072  0875               	movf	_contador,w
   710  0073  00F0               	movwf	??_isr
   711  0074  01F1               	clrf	??_isr+1
   712  0075  0827               	movf	_valores+7,w
   713  0076  0671               	xorwf	??_isr+1,w
   714  0077  1D03               	skipz
   715  0078  287B               	goto	u8_25
   716  0079  0826               	movf	_valores+6,w
   717  007A  0670               	xorwf	??_isr,w
   718  007B                     u8_25:
   719  007B  1D03               	skipz
   720  007C  287E               	goto	u8_21
   721  007D  287F               	goto	u8_20
   722  007E                     u8_21:
   723  007E  2883               	goto	i1l720
   724  007F                     u8_20:
   725  007F                     i1l718:
   726                           
   727                           ;Ejercicio4.c: 66:             posi = 3;
   728  007F  3003               	movlw	3
   729  0080  00F0               	movwf	??_isr
   730  0081  0870               	movf	??_isr,w
   731  0082  00F4               	movwf	_posi
   732  0083                     i1l720:
   733                           
   734                           ;Ejercicio4.c: 67:             INTCONbits.RBIF = 0;
   735  0083  100B               	bcf	11,0	;volatile
   736                           
   737                           ;Ejercicio4.c: 68:         if (contador == valores[4])
   738  0084  0875               	movf	_contador,w
   739  0085  00F0               	movwf	??_isr
   740  0086  01F1               	clrf	??_isr+1
   741  0087  0829               	movf	_valores+9,w
   742  0088  0671               	xorwf	??_isr+1,w
   743  0089  1D03               	skipz
   744  008A  288D               	goto	u9_25
   745  008B  0828               	movf	_valores+8,w
   746  008C  0670               	xorwf	??_isr,w
   747  008D                     u9_25:
   748  008D  1D03               	skipz
   749  008E  2890               	goto	u9_21
   750  008F  2891               	goto	u9_20
   751  0090                     u9_21:
   752  0090  2895               	goto	i1l724
   753  0091                     u9_20:
   754  0091                     i1l722:
   755                           
   756                           ;Ejercicio4.c: 69:             posi = 4;
   757  0091  3004               	movlw	4
   758  0092  00F0               	movwf	??_isr
   759  0093  0870               	movf	??_isr,w
   760  0094  00F4               	movwf	_posi
   761  0095                     i1l724:
   762                           
   763                           ;Ejercicio4.c: 70:             INTCONbits.RBIF = 0;
   764  0095  100B               	bcf	11,0	;volatile
   765                           
   766                           ;Ejercicio4.c: 71:         if (contador == valores[5])
   767  0096  0875               	movf	_contador,w
   768  0097  00F0               	movwf	??_isr
   769  0098  01F1               	clrf	??_isr+1
   770  0099  082B               	movf	_valores+11,w
   771  009A  0671               	xorwf	??_isr+1,w
   772  009B  1D03               	skipz
   773  009C  289F               	goto	u10_25
   774  009D  082A               	movf	_valores+10,w
   775  009E  0670               	xorwf	??_isr,w
   776  009F                     u10_25:
   777  009F  1D03               	skipz
   778  00A0  28A2               	goto	u10_21
   779  00A1  28A3               	goto	u10_20
   780  00A2                     u10_21:
   781  00A2  28A7               	goto	i1l728
   782  00A3                     u10_20:
   783  00A3                     i1l726:
   784                           
   785                           ;Ejercicio4.c: 72:             posi = 5;
   786  00A3  3005               	movlw	5
   787  00A4  00F0               	movwf	??_isr
   788  00A5  0870               	movf	??_isr,w
   789  00A6  00F4               	movwf	_posi
   790  00A7                     i1l728:
   791                           
   792                           ;Ejercicio4.c: 73:             INTCONbits.RBIF = 0;
   793  00A7  100B               	bcf	11,0	;volatile
   794                           
   795                           ;Ejercicio4.c: 74:         if (contador == valores[6])
   796  00A8  0875               	movf	_contador,w
   797  00A9  00F0               	movwf	??_isr
   798  00AA  01F1               	clrf	??_isr+1
   799  00AB  082D               	movf	_valores+13,w
   800  00AC  0671               	xorwf	??_isr+1,w
   801  00AD  1D03               	skipz
   802  00AE  28B1               	goto	u11_25
   803  00AF  082C               	movf	_valores+12,w
   804  00B0  0670               	xorwf	??_isr,w
   805  00B1                     u11_25:
   806  00B1  1D03               	skipz
   807  00B2  28B4               	goto	u11_21
   808  00B3  28B5               	goto	u11_20
   809  00B4                     u11_21:
   810  00B4  28B9               	goto	i1l732
   811  00B5                     u11_20:
   812  00B5                     i1l730:
   813                           
   814                           ;Ejercicio4.c: 75:             posi = 6;
   815  00B5  3006               	movlw	6
   816  00B6  00F0               	movwf	??_isr
   817  00B7  0870               	movf	??_isr,w
   818  00B8  00F4               	movwf	_posi
   819  00B9                     i1l732:
   820                           
   821                           ;Ejercicio4.c: 76:             INTCONbits.RBIF = 0;
   822  00B9  100B               	bcf	11,0	;volatile
   823                           
   824                           ;Ejercicio4.c: 77:         if (contador == valores[7])
   825  00BA  0875               	movf	_contador,w
   826  00BB  00F0               	movwf	??_isr
   827  00BC  01F1               	clrf	??_isr+1
   828  00BD  082F               	movf	_valores+15,w
   829  00BE  0671               	xorwf	??_isr+1,w
   830  00BF  1D03               	skipz
   831  00C0  28C3               	goto	u12_25
   832  00C1  082E               	movf	_valores+14,w
   833  00C2  0670               	xorwf	??_isr,w
   834  00C3                     u12_25:
   835  00C3  1D03               	skipz
   836  00C4  28C6               	goto	u12_21
   837  00C5  28C7               	goto	u12_20
   838  00C6                     u12_21:
   839  00C6  28CB               	goto	i1l736
   840  00C7                     u12_20:
   841  00C7                     i1l734:
   842                           
   843                           ;Ejercicio4.c: 78:             posi = 7;
   844  00C7  3007               	movlw	7
   845  00C8  00F0               	movwf	??_isr
   846  00C9  0870               	movf	??_isr,w
   847  00CA  00F4               	movwf	_posi
   848  00CB                     i1l736:
   849                           
   850                           ;Ejercicio4.c: 79:             INTCONbits.RBIF = 0;
   851  00CB  100B               	bcf	11,0	;volatile
   852                           
   853                           ;Ejercicio4.c: 80:         if (contador == valores[8])
   854  00CC  0875               	movf	_contador,w
   855  00CD  00F0               	movwf	??_isr
   856  00CE  01F1               	clrf	??_isr+1
   857  00CF  0831               	movf	_valores+17,w
   858  00D0  0671               	xorwf	??_isr+1,w
   859  00D1  1D03               	skipz
   860  00D2  28D5               	goto	u13_25
   861  00D3  0830               	movf	_valores+16,w
   862  00D4  0670               	xorwf	??_isr,w
   863  00D5                     u13_25:
   864  00D5  1D03               	skipz
   865  00D6  28D8               	goto	u13_21
   866  00D7  28D9               	goto	u13_20
   867  00D8                     u13_21:
   868  00D8  28DD               	goto	i1l740
   869  00D9                     u13_20:
   870  00D9                     i1l738:
   871                           
   872                           ;Ejercicio4.c: 81:             posi = 8;
   873  00D9  3008               	movlw	8
   874  00DA  00F0               	movwf	??_isr
   875  00DB  0870               	movf	??_isr,w
   876  00DC  00F4               	movwf	_posi
   877  00DD                     i1l740:
   878                           
   879                           ;Ejercicio4.c: 82:             INTCONbits.RBIF = 0;
   880  00DD  100B               	bcf	11,0	;volatile
   881                           
   882                           ;Ejercicio4.c: 83:         if (contador == valores[9])
   883  00DE  0875               	movf	_contador,w
   884  00DF  00F0               	movwf	??_isr
   885  00E0  01F1               	clrf	??_isr+1
   886  00E1  0833               	movf	_valores+19,w
   887  00E2  0671               	xorwf	??_isr+1,w
   888  00E3  1D03               	skipz
   889  00E4  28E7               	goto	u14_25
   890  00E5  0832               	movf	_valores+18,w
   891  00E6  0670               	xorwf	??_isr,w
   892  00E7                     u14_25:
   893  00E7  1D03               	skipz
   894  00E8  28EA               	goto	u14_21
   895  00E9  28EB               	goto	u14_20
   896  00EA                     u14_21:
   897  00EA  28EF               	goto	i1l744
   898  00EB                     u14_20:
   899  00EB                     i1l742:
   900                           
   901                           ;Ejercicio4.c: 84:             posi = 9;
   902  00EB  3009               	movlw	9
   903  00EC  00F0               	movwf	??_isr
   904  00ED  0870               	movf	??_isr,w
   905  00EE  00F4               	movwf	_posi
   906  00EF                     i1l744:
   907                           
   908                           ;Ejercicio4.c: 85:             INTCONbits.RBIF = 0;
   909  00EF  100B               	bcf	11,0	;volatile
   910  00F0                     i1l53:
   911  00F0  0873               	movf	??_isr+3,w
   912  00F1  008A               	movwf	10
   913  00F2  0E72               	swapf	??_isr+2,w
   914  00F3  0083               	movwf	3
   915  00F4  0EFE               	swapf	btemp,f
   916  00F5  0E7E               	swapf	btemp,w
   917  00F6  0009               	retfie
   918  00F7                     __end_of_isr:
   919  007E                     btemp	set	126	;btemp
   920  007E                     wtemp0	set	126
   921                           
   922                           	psect	intentry
   923  0004                     __pintentry:	
   924                           ;incstack = 0
   925                           ; Regs used in _isr: [wreg+status,2+status,0]
   926                           
   927  0004                     interrupt_function:
   928  007E                     saved_w	set	btemp
   929  0004  00FE               	movwf	btemp
   930  0005  0E03               	swapf	3,w
   931  0006  00F2               	movwf	??_isr+2
   932  0007  080A               	movf	10,w
   933  0008  00F3               	movwf	??_isr+3
   934  0009  120A  118A  2823   	ljmp	_isr
   935                           
   936                           	psect	idloc
   937                           
   938                           ;Config register IDLOC0 @ 0x2000
   939                           ;	unspecified, using default values
   940  2000                     	org	8192
   941  2000  3FFF               	dw	16383
   942                           
   943                           ;Config register IDLOC1 @ 0x2001
   944                           ;	unspecified, using default values
   945  2001                     	org	8193
   946  2001  3FFF               	dw	16383
   947                           
   948                           ;Config register IDLOC2 @ 0x2002
   949                           ;	unspecified, using default values
   950  2002                     	org	8194
   951  2002  3FFF               	dw	16383
   952                           
   953                           ;Config register IDLOC3 @ 0x2003
   954                           ;	unspecified, using default values
   955  2003                     	org	8195
   956  2003  3FFF               	dw	16383
   957                           
   958                           	psect	config
   959                           
   960                           ;Config register CONFIG1 @ 0x2007
   961                           ;	Oscillator Selection bits
   962                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   963                           ;	Watchdog Timer Enable bit
   964                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   965                           ;	Power-up Timer Enable bit
   966                           ;	PWRTE = OFF, PWRT disabled
   967                           ;	RE3/MCLR pin function select bit
   968                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   969                           ;	Code Protection bit
   970                           ;	CP = OFF, Program memory code protection is disabled
   971                           ;	Data Code Protection bit
   972                           ;	CPD = OFF, Data memory code protection is disabled
   973                           ;	Brown Out Reset Selection bits
   974                           ;	BOREN = OFF, BOR disabled
   975                           ;	Internal External Switchover bit
   976                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   977                           ;	Fail-Safe Clock Monitor Enabled bit
   978                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   979                           ;	Low Voltage Programming Enable bit
   980                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   981                           ;	In-Circuit Debugger Mode bit
   982                           ;	DEBUG = 0x1, unprogrammed default
   983  2007                     	org	8199
   984  2007  20D4               	dw	8404
   985                           
   986                           ;Config register CONFIG2 @ 0x2008
   987                           ;	Brown-out Reset Selection bit
   988                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   989                           ;	Flash Program Memory Self Write Enable bits
   990                           ;	WRT = OFF, Write protection off
   991  2008                     	org	8200
   992  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       6
    BANK0            80      0      20
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      14       5       25.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      4       6       1       42.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1A      12        0.0%
ABS                  0      0      1A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Wed Mar 30 21:10:21 2022

                      pc 0002                       l64 0118                       fsr 0004  
                    l660 010A                      l670 010F                      l662 010B  
                    l750 0145                      l680 0117                      l672 0110  
                    l664 010C                      l656 00F7                      l752 0149  
                    l674 0111                      l666 010D                      l658 0107  
                    l676 0112                      l668 010E                      l748 0140  
                    l678 0113                      _isr 0023                      indf 0000  
                   ?_isr 0070                     i1l44 005F                     i1l53 00F0  
                   u1_20 0027                     u1_21 0026                     u2_20 002D  
                   u2_21 002C                     u3_20 0035                     u3_21 0034  
                   u4_20 003E                     u4_21 003D                     u5_20 004E  
                   u5_21 004D                     u5_25 004A                     u6_20 005D  
                   u6_21 005C                     u6_25 0059                     u7_20 006D  
                   u7_21 006C                     u7_25 0069                     u8_20 007F  
                   u8_21 007E                     u8_25 007B                     u9_20 0091  
                   u9_21 0090                     u9_25 008D                     _main 0140  
                   _posi 0074                     btemp 007E                     start 000C  
                  ??_isr 0070                    ?_main 0070                    _ANSEL 0188  
                  i1l700 0040                    i1l710 005D                    i1l702 0041  
                  i1l720 0083                    i1l712 0060                    i1l704 004E  
                  i1l730 00B5                    i1l722 0091                    i1l714 006D  
                  i1l706 004F                    i1l740 00DD                    i1l732 00B9  
                  i1l724 0095                    i1l716 0071                    i1l708 0050  
                  i1l742 00EB                    i1l734 00C7                    i1l726 00A3  
                  i1l718 007F                    i1l744 00EF                    i1l736 00CB  
                  i1l728 00A7                    i1l738 00D9                    i1l690 002F  
                  i1l682 0023                    i1l692 0035                    i1l684 0027  
                  i1l694 0039                    i1l686 002D                    i1l696 003A  
                  i1l688 002E                    i1l698 003E                    u10_20 00A3  
                  u10_21 00A2                    u10_25 009F                    u11_20 00B5  
                  u11_21 00B4                    u11_25 00B1                    u12_20 00C7  
                  u12_21 00C6                    u12_25 00C3                    u13_20 00D9  
                  u13_21 00D8                    u13_25 00D5                    u14_20 00EB  
                  u14_21 00EA                    u14_25 00E7                    _PORTA 0005  
                  _PORTC 0007                    _TRISA 0085                    _TRISC 0087  
                  _setup 00F7                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 014F  
                 ??_main 0074                   ?_setup 0070                   _ANSELH 0189  
                 saved_w 007E  __end_of__initialization 001F           __pcstackCOMMON 0070  
           __pidataBANK0 0119            __end_of_setup 0119           _OPTION_REGbits 0081  
                ??_setup 0074               __pmaintext 0140               __pintentry 0004  
                __ptext1 00F7                  __ptext2 0023                  _valores 0020  
   end_of_initialization 001F                _PORTBbits 0006                _TRISBbits 0086  
    start_initialization 000F              __end_of_isr 00F7               init_fetch0 012D  
            __pdataBANK0 0020              __pbssCOMMON 0074                ___latbits 0002  
      interrupt_function 0004                 _IOCBbits 0096                 _WPUBbits 0095  
               _contador 0075               _INTCONbits 000B                 init_ram0 0131  
               intlevel1 0000               _OSCCONbits 008F  
